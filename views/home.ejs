<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - SmartLocker Campus System</title>
    <link rel="stylesheet" href="../css/keypad.css">
    <link rel="stylesheet" href="../css/calendar.css">
    <link rel="stylesheet" href="../css/bottom-bar.css">   
    <link rel="stylesheet" href="../css/sidebar-main.css">   
    <link rel="stylesheet" href="../css/table.css">   
    <link rel="stylesheet" href="../css/main.css">   
    <link rel="stylesheet" href="../css/qrcode.css">   
    <link rel="stylesheet" href="../css/emergency.css">   
    <link rel="stylesheet" href="../css/user-settings.css">
    <link rel="stylesheet" href="../css/camera.css">
    <link rel="stylesheet" href="../css/chatbot.css">
</head>
<body>
    <div class="sidebar">
        <a href="#home" id="homeLink">Home</a>
        <a href="#virtualKeypad" onclick="showVirtualKeypad()">Virtual Keypad Login</a>
        <a href="#lockerStatus" onclick="loadLockerStatus()">Locker Status</a>
        <a href="#location" onclick="showLocation()">Locker Location</a>
        <a href="#calendar" onclick="showCalendar()">Academic calendar</a>
        <a href="#suspiciousReports">Suspicious Alerts</a>
        <a href="#userSettings" onclick="showUserSettings()">User Settings</a>
        <a href="#qrCode" onclick="QRCodefunction()">QR Code Function</a>
        <a href="#camera" onclick="showCamera()">Live Camera</a>
        <% if (userRole === 'guard') { %>
            <a href="#emergencyUnlock" onclick="showEmergencyUnlock()" style="color: red;">Emergency Locker Unlock</a>
        <% } %>
        <a href="#" id="logoutButton" class="logout-button">Logout</a>

    </div>

    <div class="main-content">
        <div class="title-bar">
            <h1>SmartLocker Campus System ðŸ”’</h1>
        </div>
        <div class="title-bar-padding"></div>
        
        <div class="content">
            showWelcomePage();
            
        </div>


     <div class="bottom-bar">
        <button id="toggleButton" class="round-button">Chat</button>
        <div class="bottom-bar-content">
            Contact us: +123456789 | Email: info@smartlockercampus.com <br>Â© 2023 SmartLocker Campus. All rights reserved.
        </div>
    </div>
    
    <div id="chatbotContainer" class="chatbot-container" style="display: none;">
        <div id="chatbotMessages" class="chatbot-messages">
 
     </div>
     <input type="text" id="chatbotInput" placeholder="Type your message...">
     <button onclick="sendMessage()">Send</button>
     
        </div>
    </div>
</body>
</html>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/gh/davidshimjs/qrcodejs/qrcode.min.js"></script>
<script src="../js/welcome.js"></script>
<script src="../js/email.js"></script>


<script>
    var displayName = '<%= displayName %>';
    var lockerNumber = '<%= lockerNumber %>';
</script>

<script>
document.getElementById('logoutButton').addEventListener('click', function() {
    window.location.href = '/'; 
});
document.addEventListener('DOMContentLoaded', (event) => {
    showWelcomePage();
});
</script>

<script>
document.getElementById('homeLink').addEventListener('click', function() {
  showWelcomePage();
});

function toggleChatbot() {
    var chatbotEl = document.getElementById('chatbotContainer');
    var displayStyle = chatbotEl.style.display;
    chatbotEl.style.display = displayStyle === 'none' ? 'block' : 'none';
}

document.getElementById('toggleButton').addEventListener('click', toggleChatbot);


async function sendMessage() {
    const inputEl = document.getElementById('chatbotInput');
    const message = inputEl.value;
    inputEl.value = '';

    // Display user's message
    addMessageToChat('You: ' + message);

    try {
        // Send to ChatGPT API
        const response = await fetch('https://api.openai.com/v1/engines/davinci-codex/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer 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'
            },
            body: JSON.stringify({
                prompt: message,
                max_tokens: 150
            })
        });

        if (!response.ok) {
            //throw new Error(`API response not OK. Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data); // Log the response to the console
        addMessageToChat('AI: ' + data.choices[0].text);
    } catch (error) {
        console.error('Error:', error);
        //addMessageToChat('AI: Sorry, there was an error. ' + error.message);
        addMessageToChat('AI: Hello! What can I help you? ');
    }
}



function addMessageToChat(message) {
    const chatMessagesEl = document.getElementById('chatbotMessages');
    const messageEl = document.createElement('div');
    messageEl.textContent = message;
    chatMessagesEl.appendChild(messageEl);
}


function loadLockerStatus() {
      const channelID = 2315925;
      //2315925 ,51245
      fetch(`https://api.thingspeak.com/channels/${channelID}/feeds.json?results=60`)
          .then(response => response.json())
          .then(data => {
              displayLockerStatus(data.feeds);
          });
  }

  function displayLockerStatus(feeds) {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = '<h2>Locker Status</h2><select id="dataSelection" onchange="updateChartDisplay()"><option value="Humidity">Humidity</option><option value="Temperature">Temperature</option><option value="Light">Light</option></select>';

    const chartContainerStyle = 'width:95%; max-width:flex; height:450px; margin:auto;';

    // Prepare containers for charts
    const canvasHumidity = document.createElement('canvas');
    canvasHumidity.style = chartContainerStyle;
    canvasHumidity.id = 'HumidityChart';

    const canvastemperature = document.createElement('canvas');
    canvastemperature.style = chartContainerStyle;
    canvastemperature.id = 'TemperatureChart';

    const canvasLight = document.createElement('canvas');
    canvasLight.style = chartContainerStyle;
    canvasLight.id = 'LightChart';
    
    contentDiv.appendChild(canvasHumidity);
    contentDiv.appendChild(canvastemperature);
    contentDiv.appendChild(canvasLight);

    // Create Humidity Chart
    new Chart(canvasHumidity, {
    type: 'line',
    data: {
        labels: feeds.map(feed => new Date(feed.created_at).toLocaleTimeString()),
        datasets: [{
            label: 'Humidity',
            data: feeds.map(feed => feed.field1),
            borderColor: 'rgb(54, 162, 235)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            fill: false, // Ensures the area under the line is not filled
            lineTension: 0.1 // Adjust for smoother lines
        }]
    },
    options: {
        scales: {
            xAxes: [{
                type: 'time',
                time: {
                    unit: 'minute', // Adjust based on your data
                    displayFormats: {
                        minute: 'h:mm a' // Format for the axis labels
                    }
                }
            }]
        }
    }
});


    // Create temperature Chart
    new Chart(canvastemperature, {
        type: 'line',
        data: {
                labels: feeds.map(feed => new Date(feed.created_at).toLocaleTimeString()),
                datasets: [{
                    label: 'Temperature',
                    data: feeds.map(feed => feed.field2), // field2 is temperature
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                }]
            }
    });

    // Create Light Chart
    new Chart(canvasLight, {
        type: 'line',
        data: {
                labels: feeds.map(feed => new Date(feed.created_at).toLocaleTimeString()),
                datasets: [{
                    label: 'Light',
                    data: feeds.map(feed => feed.field3), // field3 is Light
                    borderColor: 'rgb(255, 206, 86)',
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                }]
            }
    });

    // Initially, hide all except Humidity chart
    canvastemperature.style.display = 'none';
    canvasLight.style.display = 'none';
}

function updateChartDisplay() {
    const selectedData = document.getElementById('dataSelection').value;
    document.getElementById('HumidityChart').style.display = selectedData === 'Humidity' ? 'block' : 'none';
    document.getElementById('TemperatureChart').style.display = selectedData === 'Temperature' ? 'block' : 'none';
    document.getElementById('LightChart').style.display = selectedData === 'Light' ? 'block' : 'none';
}

//calendar
let selectedYear = new Date().getFullYear(); // Default to current year

function initializeYearSelector() {
    const yearSelect = document.getElementById('yearSelect');
    if (yearSelect) {
        yearSelect.addEventListener('change', updateCalendarYear);
    }
}

function updateCalendarYear() {
    selectedYear = parseInt(document.getElementById('yearSelect').value);
    const calendarDiv = document.getElementById('calendarDiv');
    if(calendarDiv) {
        calendarDiv.innerHTML = generateCalendar(); 
    }
}

function createYearSelector() {
    const yearSelectorDiv = document.createElement('div');
    yearSelectorDiv.id = 'yearSelector';
    yearSelectorDiv.innerHTML = `
        <label for="yearSelect">Select Year:</label>
        <select id="yearSelect">
            <option value="${new Date().getFullYear()}">${new Date().getFullYear()}</option>
            <option value="${new Date().getFullYear() + 1}">${new Date().getFullYear() + 1}</option>
        </select>
    `;
    const yearSelect = yearSelectorDiv.querySelector('#yearSelect');
    yearSelect.addEventListener('change', updateCalendarYear);

    return yearSelectorDiv;
}

function showCalendar() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = ''; 

    // Append year selector
    const yearSelector = createYearSelector();
    contentDiv.appendChild(yearSelector);

    // Generate and append calendar
    const calendarDiv = document.createElement('div');
    calendarDiv.id = 'calendarDiv';
    calendarDiv.innerHTML = generateCalendar();
    contentDiv.appendChild(calendarDiv);

    // Show the reminder alert after the calendar is loaded
    setTimeout(function() {
        alert('Kindly reminder: Please remember to return and clear your locker before the end of your rental period.');
    }, 250); 

}

function generateCalendar() {
    let calendarHTML = '<div class="calendar">';
    for (let month = 0; month < 12; month++) {
        calendarHTML += createMonthCalendar(month, selectedYear);
    }
    calendarHTML += '</div>';
    return calendarHTML;
}

const rentalStartDate = new Date(2023, 8, 12); // 12 September 2023
const rentalEndDate = new Date(2024, 6, 31);   // 31 July 2024

function getRentalDates(year) {
    return {
        start: new Date(year, 8, 12), // 12 September
        end: new Date(year + 1, 6, 31) // 31 July of the next year
    };
}

function createMonthCalendar(month, year) {
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let date = new Date(year, month, 1);

    let monthCalendarHTML = '<div class="month">';
    monthCalendarHTML += `<h3>${monthNames[month]} ${year}</h3>`;
    monthCalendarHTML += '<div class="days">';

    // Days Header
    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    days.forEach(day => {
        monthCalendarHTML += `<div class="day-header">${day}</div>`;
    });

    // Padding days
    for (let i = 0; i < date.getDay(); i++) {
        monthCalendarHTML += '<div class="day"></div>';
    }

    // Actual days
    while (date.getMonth() === month) {
        let specialDateClass = '';
        let specialDateDescription = '';

        // Check if it's the start or end of the rental period
        if (date.getTime() === rentalStartDate.getTime()) {
            specialDateClass = 'rental-start';
            specialDateDescription = '<div>Rental Starts</div>';
        } else if (date.getTime() === rentalEndDate.getTime()) {
            specialDateClass = 'rental-end';
            specialDateDescription = '<div>Return Locker</div>';
        }

        monthCalendarHTML += `<div class="day ${specialDateClass}">${date.getDate()}${specialDateDescription}</div>`;
        date.setDate(date.getDate() + 1);
    }

    monthCalendarHTML += '</div></div>';
    return monthCalendarHTML;
}


function showVirtualKeypad() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = `
        <input type="text" id="display" readonly>
        <div id="keypad">
          <button class="button number">1</button>
          <button class="button number">2</button>
          <button class="button number">3</button>
          <button class="button number">4</button>
          <button class="button number">5</button>
          <button class="button number">6</button>
          <button class="button number">7</button>
          <button class="button number">8</button>
          <button class="button number">9</button>
          <button class="button number">0</button>
          <button class="button symbol">A</button>
          <button class="button symbol">B</button>
          <button class="button symbol">C</button>
          <button class="button symbol">D</button>
          <button class="button symbol">*</button>
          <button class="button symbol">#</button>
        </div>
        <button id="clearButton">Clear</button>
        <button id="submitButton">Submit</button>
    `;

    document.querySelectorAll('#keypad .button').forEach(button => {
        button.addEventListener('click', () => appendKey(button.textContent));

        
    });
    document.getElementById('submitButton').addEventListener('click', submitKeypadInput);
    document.getElementById('clearButton').addEventListener('click', clearDisplay);
}


function submitKeypadInput() {
    const inputCode = document.getElementById('display').value;
    const correctPassword = "12345678";
    const fieldToUpdate = 6; 
    const apiKey = "B66AQC1B5H7758EU"; 

    function updateField(value) {
        const updateURL = `https://api.thingspeak.com/update?api_key=${apiKey}&field${fieldToUpdate}=${value}`;

        fetch(updateURL)
            .then(response => response.text())
            .then(data => {
                if (data > 0) {
                    console.log('ThingSpeak update successful. Entry number: ' + data);
                } else {
                    console.log('ThingSpeak update failed.');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

    if (inputCode === correctPassword) {
        updateField(1);
        alert('Locker Unlocked!');
        setTimeout(() => {
            updateField(0); // Reset the field to 0 after 15 seconds
        }, 15000);
    } else {
        updateField(0);
        alert('Incorrect password!');
    }

    clearDisplay();
}




function appendKey(keyValue) {
    const display = document.getElementById('display');
    display.value += keyValue;
}

function clearDisplay() {
    document.getElementById('display').value = '';
}

function showLocation() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = `
        <h2>Your locker Location</h2>
        <div id="map" style="width:100%;height:500px;">
            <iframe
                width="100%"
                height="100%"
                frameborder="0" style="border:0"
                src="https://www.google.com/maps/embed/v1/place?key=AIzaSyAWrJNADj1_Lhiv0Gqg4bP6XLVO7tyUp0E&q=22.3370342,114.1701451" allowfullscreen>
            </iframe>
        </div>
    `;
}

function showCamera() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = `
        <h2>Live Camera Feed</h2>
        <p> LIVE Link: <a href="http://192.168.0.188" target="_blank">LIVE</a> </p>
        <img src="../images/cctv.jpg" alt="locker" class="cctv-image">
    `;
}

// <div>
//             <label for="resolution">Resolution:</label>
//             <select id="resolution" onchange="changeCameraResolution()">
//                 <option value="UXGA">1600x1200</option>
//                 <option value="SXGA">1280x1024</option>
//                 <option value="XGA">1024x768</option>
//                 <option value="SVGA">800x600</option>
//                 <option value="VGA">640x480</option>
//                 <option value="CIF">400x296</option>
//                 <option value="QVGA">320x240</option>
//                 <option value="HQVGA">240x176</option>
//                 <option selected="selected" value="QQVGA">160x120</option>
//             </select>
//         </div>
//         <div id="camera-feed" style="width:auto;height:auto;">
//             <img id="camera-stream" src="http://192.168.103.12:81/stream" style="width:auto;height:auto">
//         </div>

// Banned because of CORS policy

// function changeCameraResolution() {
//     const resolution = document.getElementById('resolution').value;
//     const cameraStream = document.getElementById('camera-stream');

//     switch (resolution) {
//         case 'UXGA':
//             cameraStream.style.width = '1600px';
//             cameraStream.style.height = '1200px';
//             break;
//         case 'SXGA':
//             cameraStream.style.width = '1280px';
//             cameraStream.style.height = '1024px';
//             break;
//         case 'XGA':
//             cameraStream.style.width = '1024px';
//             cameraStream.style.height = '768px';
//             break;
//         case 'SVGA':
//             cameraStream.style.width = '800px';
//             cameraStream.style.height = '600px';
//             break;
//         case 'VGA':
//             cameraStream.style.width = '640px';
//             cameraStream.style.height = '480px';
//             break;
//         case 'CIF':
//             cameraStream.style.width = '400px';
//             cameraStream.style.height = '296px';
//             break;
//         case 'QVGA':
//             cameraStream.style.width = '320px';
//             cameraStream.style.height = '240px';
//             break;
//         case 'HQVGA':
//             cameraStream.style.width = '240px';
//             cameraStream.style.height = '176px';
//             break;
//         case 'QQVGA':
//             cameraStream.style.width = '160px';
//             cameraStream.style.height = '120px';
//             break;
//         default:
//             cameraStream.style.width = '100%'; // Default to full width if resolution not found
//             cameraStream.style.height = 'auto';
//     }
// }


function showSuspiciousAlerts() {
    const channelID = 2315925;
    const apiKey = "CGTJDYPH6BL5TVIP"; // Your ThingSpeak Read API key
    const fieldNumberLocal = 5; // Field number for local unlock status
    const fieldNumberOnline = 6; // Field number for online unlock status
    const results = 10; // Number of results to retrieve

    let readURL = `https://api.thingspeak.com/channels/${channelID}/fields/${fieldNumberLocal}.json?api_key=${apiKey}&results=${results}`;
    let readURL2 = `https://api.thingspeak.com/channels/${channelID}/fields/${fieldNumberOnline}.json?api_key=${apiKey}&results=${results}`;

    Promise.all([
        fetch(readURL).then(response => response.json()),
        fetch(readURL2).then(response => response.json())
    ])
    .then(([dataLocal, dataOnline]) => {
        let combinedFeeds = dataLocal.feeds.map((feed, index) => {
            return {
                ...feed,
                field6: dataOnline.feeds[index].field6
            };
        });
        buildStatusTable(combinedFeeds);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}


function buildStatusTable(feeds) {
    const contentDiv = document.querySelector('.content');
    let tableHTML = '<h2>Suspicious Alerts</h2><table><tr><th>Time</th><th>Unlock Status</th></tr>';

    feeds.forEach(feed => {
        let status = 'Locked';

        if (feed.field6 === "1") {
            // If unlocked online, prioritize this status
            status = 'Unlocked (Online)';
        } else if (feed.field5 === "1") {
            // If not unlocked online, but unlocked locally
            status = 'Unlocked (Local)';
        }

        // Row class for styling if unlocked
        const rowClass = (feed.field5 === "1" || feed.field6 === "1") ? 'suspicious' : '';
        const time = new Date(feed.created_at).toLocaleString();
        
        tableHTML += `<tr class="${rowClass}"><td>${time}</td><td>${status}</td></tr>`;
    });

    tableHTML += '</table>';
    contentDiv.innerHTML = tableHTML;
}




document.querySelector('a[href="#suspiciousReports"]').addEventListener('click', showSuspiciousAlerts);


function QRCodefunction() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = '<h2>Scan QR Code</h2>';

    // Add camera feed element for scanning
    const cameraFeed = document.createElement('video');
    cameraFeed.id = 'qrScanner';
    cameraFeed.style.width = '80%';
    contentDiv.appendChild(cameraFeed);

    // Add a section to display the scanned QR code data
    const scannedDataContainer = document.createElement('div');
    scannedDataContainer.className = 'scanned-data-container';
    const scannedDataTitle = document.createElement('div');
    scannedDataTitle.className = 'scanned-data-title';
    scannedDataTitle.textContent = 'Scanned Data:';
    const scannedDataContent = document.createElement('div');
    scannedDataContent.className = 'scanned-data-content';
    scannedDataContent.id = 'scannedData';
    scannedDataContainer.appendChild(scannedDataTitle);
    scannedDataContainer.appendChild(scannedDataContent);
    contentDiv.appendChild(scannedDataContainer);

    // Initialize the scanner
    const cameraSelect = document.createElement('select');
    cameraSelect.id = 'cameraSelect';
    contentDiv.appendChild(cameraSelect);

    let scanner = new Instascan.Scanner({ video: document.getElementById('qrScanner') });
    scanner.addListener('scan', function (content) {
        document.getElementById('scannedData').textContent = content;
    });

    Instascan.Camera.getCameras().then(function (cameras) {
        cameras.forEach((camera, i) => {
            const opt = document.createElement('option');
            opt.value = camera.id; // Use camera id for value
            opt.innerHTML = camera.name || `Camera ${i + 1}`;
            cameraSelect.appendChild(opt);
        });

        if (cameras.length > 0) {
            scanner.start(cameras[0]); // Start the first camera by default
        } else {
            console.error('No cameras found.');
            alert('No cameras found.');
        }

        // Handle camera change
        cameraSelect.addEventListener('change', function () {
            scanner.stop(); // Stop the current camera
            const selectedCamera = cameras.find(c => c.id === this.value);
            if (selectedCamera) {
                scanner.start(selectedCamera);
            }
        });
    }).catch(function (e) {
        console.error(e);
        alert(e);
    });

        // Handle camera change
        cameraSelect.addEventListener('change', function () {
        if (currentCamera) {
            scanner.stop(currentCamera);
        }
        const cameraIndex = parseInt(this.value, 10);
        currentCamera = cameras[cameraIndex];
        scanner.start(currentCamera);
    });


    // QR Code Container
    const qrContainer = document.createElement('div');
    qrContainer.className = 'qr-container';

    // Title
    const qrTitle = document.createElement('h2');
    qrTitle.className = 'qr-title';
    qrTitle.textContent = 'Your locker QR code will appear here.';
    qrContainer.appendChild(qrTitle);

    // QR Code
    const qrCodeDiv = document.createElement('div');
    qrCodeDiv.id = 'qrCode';
    qrCodeDiv.className = 'qr-code';
    qrContainer.appendChild(qrCodeDiv);

    // Description
    const qrDescription = document.createElement('div');
    qrDescription.className = 'qr-description';
    qrDescription.textContent = 'Your locker information is in the QR code.';
    qrContainer.appendChild(qrDescription);

    // Append to Content Div
    contentDiv.appendChild(qrContainer);

    // Generate QR Code
    new QRCode(document.getElementById('qrCode'), {
        text: 'Locker Number',  // Replace with actual locker number
        width: 128,
        height: 128,
        colorDark: '#000000',
        colorLight: '#ffffff',
        correctLevel: QRCode.CorrectLevel.H
    });

}


function showUserSettings() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = '';

    const userSettingsContainer = document.createElement('div');
    userSettingsContainer.className = 'user-settings-container';

    const userSettingsTitle = document.createElement('h2');
    userSettingsTitle.className = 'user-settings-title';
    userSettingsTitle.textContent = 'User Settings (Reset Password)';
    userSettingsContainer.appendChild(userSettingsTitle);

    const form = document.createElement('form');
    form.id = 'userSettingsForm';
    form.className = 'user-settings-form';
    form.innerHTML = `
        <label for="userInput">Username/Email:</label>
        <input type="text" id="userInput" name="userInput" placeholder="Enter your username or email"><br>
        <label for="newPassword">New Password:</label>
        <input type="password" id="newPassword" name="newPassword"><br>
        <input type="submit" value="Update Password">
    `;
    userSettingsContainer.appendChild(form);

    // Append to Content Div
    contentDiv.appendChild(userSettingsContainer);

    // Event Listener for Form Submission
    document.getElementById('userSettingsForm').addEventListener('submit', function(event) {
        event.preventDefault();
        updatePassword();
    });
}


function updatePassword() {
    const userInput = document.getElementById('userInput').value;
    const newPassword = document.getElementById('newPassword').value;

    const formData = new URLSearchParams();
    formData.append('userInput', userInput);
    formData.append('newPassword', newPassword);

    fetch('/updatePassword', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        alert(data); // Display a message to the user
    })
    .catch(error => console.error('Error:', error));
}

document.querySelector('a[href="#userSettings"]').addEventListener('click', showUserSettings);

function showEmergencyUnlock() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = '';

    // Emergency Container
    const emergencyContainer = document.createElement('div');
    emergencyContainer.className = 'emergency-container';

    // Title
    const emergencyTitle = document.createElement('h2');
    emergencyTitle.className = 'emergency-title';
    emergencyTitle.textContent = 'Emergency Locker Unlock';
    emergencyContainer.appendChild(emergencyTitle);

    // Form
    const form = document.createElement('form');
    form.id = 'emergencyUnlockForm';
    form.className = 'emergency-form';
    form.innerHTML = `
        <label for="lockerNumber">Locker Number:</label>
        <input type="text" id="lockerNumber" name="lockerNumber"><br>
        <label for="username">Username:</label>
        <input type="text" id="username" name="username"><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password"><br>
        <input type="submit" value="Unlock Locker">
    `;
    emergencyContainer.appendChild(form);

    // Append to Content Div
    contentDiv.appendChild(emergencyContainer);

    // Event Listener for Form Submission
    document.getElementById('emergencyUnlockForm').addEventListener('submit', function(event) {
        event.preventDefault();
        emergencyUnlock();
    });
}


function showEmergencyUnlock() {
    const contentDiv = document.querySelector('.content');
    contentDiv.innerHTML = '';

    // Emergency Container
    const emergencyContainer = document.createElement('div');
    emergencyContainer.className = 'emergency-container';

    // Title
    const emergencyTitle = document.createElement('h2');
    emergencyTitle.className = 'emergency-title';
    emergencyTitle.textContent = 'Emergency Locker Unlock';
    emergencyContainer.appendChild(emergencyTitle);

    // Description
    const emergencyDescription = document.createElement('p');
    emergencyDescription.className = 'emergency-description';
    emergencyDescription.textContent = 'This section is dedicated for emergency use by security personnel. It allows for immediate unlocking of lockers in urgent situations, such as safety concerns or when access is required by law enforcement. Please use this function responsibly and only in legitimate emergencies.';
    emergencyContainer.appendChild(emergencyDescription);

    // Form
    const form = document.createElement('form');
    form.id = 'emergencyUnlockForm';
    form.className = 'emergency-form';
    form.innerHTML = `
        <label for="lockerNumber">Locker Number:</label>
        <input type="text" id="lockerNumber" name="lockerNumber"><br>
        <label for="username">Username:</label>
        <input type="text" id="username" name="username"><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password"><br>
        <input type="submit" value="Unlock Locker">
    `;
    emergencyContainer.appendChild(form);

    // Append to Content Div
    contentDiv.appendChild(emergencyContainer);

    // Event Listener for Form Submission
    document.getElementById('emergencyUnlockForm').addEventListener('submit', function(event) {
        event.preventDefault();
        emergencyUnlock();
    });
}

function emergencyUnlock() {
    const lockerNumber = document.getElementById('lockerNumber').value;
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    // Update field 6 on ThingSpeak
    updateField(1); // Set field 6 to 1 for unlocking
    fetch('/sendEmail', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ lockerNumber, username })
    })
    .then(response => response.text())
    .then(data => {
        alert(data); // "Email sent successfully" or error message
    })
    .catch(error => console.error('Error:', error));
}

function updateField(value) {
    const apiKey = "B66AQC1B5H7758EU"; // Use your ThingSpeak Write API key
    const fieldToUpdate = 6; // Field 6 for emergency unlock

    const updateURL = `https://api.thingspeak.com/update?api_key=${apiKey}&field${fieldToUpdate}=${value}`;

    fetch(updateURL)
        .then(response => response.text())
        .then(data => {
            if (data > 0) {
                console.log('ThingSpeak update successful. Entry number: ' + data);
                alert('Emergency Unlock Successful!');
            } else {
                console.log('ThingSpeak update failed.');
                alert('Emergency Unlock Failed!');
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('Error in Emergency Unlock!');
        });
}

</script>

<script src="https://rawgit.com/schmich/instascan-builds/master/instascan.min.js"></script>
